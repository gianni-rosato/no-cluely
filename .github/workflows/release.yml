name: 🚀 Release & Publish Multi-Language SDK

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      dry_run:
        description: 'Dry run (skip actual publishing)'
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '11'

jobs:
  # ===== BUILD & TEST =====
  build-and-test:
    name: 🔨 Build & Test All Components
    runs-on: macos-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Determine Version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}" # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "📌 Version: ${VERSION}"
        
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        components: rustfmt, clippy
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: 🔧 Install Python Build Tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🛠️ Build All Components
      run: |
        echo "🔨 Building all components..."
        chmod +x build-all.sh
        ./build-all.sh
        
    - name: 🧪 Test CLI
      run: |
        ./packages/cluely-detector --version
        ./packages/cluely-detector check
        
    - name: 🧪 Test Node.js Bindings
      run: |
        cd bindings/node
        node -e "
          const { ClueLyDetector } = require('./dist/index.js');
          console.log('✅ Node.js bindings working');
          const result = ClueLyDetector.detectClueLyDetailed();
          console.log('Detection result:', result.isDetected);
        "
        
    - name: 🧪 Test Python Bindings
      run: |
        cd bindings/python
        pip install dist/*.whl
        python -c "
          from no_cluely_detector import ClueLyDetector
          print('✅ Python bindings working')
          result = ClueLyDetector.detect_cluely_detailed()
          print('Detection result:', result.is_detected)
        "
        
    - name: 🧪 Test Java Bindings
      run: |
        cd bindings/java
        java -cp target/cluely-detector-1.0.0.jar com.nocluely.ClueLyDetector
        echo "✅ Java bindings working"
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          packages/
          bindings/*/dist/
          bindings/*/target/
        retention-days: 30

  # ===== PUBLISH NODE.JS =====
  publish-nodejs:
    name: 📦 Publish Node.js Package
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: 🔨 Build Node.js Package
      run: |
        ./build-all.sh --only-node
        
    - name: 📋 Update Package Version
      run: |
        cd bindings/node
        npm version ${{ needs.build-and-test.outputs.version }} --no-git-tag-version
        
    - name: 🚀 Publish to npm
      run: |
        cd bindings/node
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== PUBLISH PYTHON =====
  publish-python:
    name: 🐍 Publish Python Package
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: 🔧 Install Build Tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 📋 Update Package Version
      run: |
        cd bindings/python
        sed -i '' 's/version = ".*"/version = "${{ needs.build-and-test.outputs.version }}"/g' pyproject.toml
        
    - name: 🔨 Build Python Package
      run: |
        ./build-all.sh --only-python
        
    - name: 🔍 Check Package
      run: |
        cd bindings/python
        twine check dist/*
        
    - name: 🚀 Publish to PyPI
      run: |
        cd bindings/python
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  # ===== PUBLISH JAVA =====
  publish-java:
    name: ☕ Publish Java Package
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: 📋 Update Package Version
      run: |
        cd bindings/java
        mvn versions:set -DnewVersion=${{ needs.build-and-test.outputs.version }}
        
    - name: 🔨 Build Java Package
      run: |
        ./build-all.sh --only-java
        
    - name: 🚀 Publish to Maven Central
      run: |
        cd bindings/java
        mvn clean deploy -P release
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

  # ===== PUBLISH RUST CRATE =====
  publish-rust:
    name: 🦀 Publish Rust Crate
    runs-on: macos-latest
    needs: build-and-test
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: 📋 Update Crate Version
      run: |
        sed -i '' 's/^version = ".*"/version = "${{ needs.build-and-test.outputs.version }}"/g' Cargo.toml
        sed -i '' 's/^version = ".*"/version = "${{ needs.build-and-test.outputs.version }}"/g' bindings/cli/Cargo.toml
        
    - name: 🔨 Build and Test
      run: |
        cargo build --release
        cargo test
        
    - name: 🚀 Publish Core Library to crates.io
      run: |
        cargo publish --token ${{ secrets.CARGO_TOKEN }}
        
    - name: ⏳ Wait for Crate Propagation
      run: sleep 60
      
    - name: 🚀 Publish CLI to crates.io
      run: |
        cd bindings/cli
        cargo publish --token ${{ secrets.CARGO_TOKEN }}

  # ===== GITHUB RELEASES =====
  publish-github-release:
    name: 📋 Publish GitHub Release
    runs-on: macos-latest
    needs: [build-and-test, publish-nodejs, publish-python, publish-java, publish-rust]
    if: always() && needs.build-and-test.result == 'success'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: 🔨 Build Distribution
      run: |
        chmod +x build-all.sh
        ./build-all.sh
        
    - name: 📝 Generate Release Notes
      id: release-notes
      run: |
        cat > release_notes.md << 'EOF'
        # 🎯 No-Cluely Driver v${{ needs.build-and-test.outputs.version }}
        
        Multi-language SDK for detecting Cluely employee monitoring software and its evasion techniques.
        
        ## 📦 Installation
        
        ### CLI Application
        ```bash
        # Download binary from releases or install via Cargo
        cargo install cluely-detector
        ```
        
        ### Node.js/TypeScript
        ```bash
        npm install @no-cluely/detector
        ```
        
        ### Python
        ```bash
        pip install no-cluely-detector
        ```
        
        ### Java (Maven)
        ```xml
        <dependency>
            <groupId>com.nocluely</groupId>
            <artifactId>cluely-detector</artifactId>
            <version>${{ needs.build-and-test.outputs.version }}</version>
        </dependency>
        ```
        
        ### Swift Package Manager
        ```swift
        dependencies: [
            .package(url: "https://github.com/your-org/no-cluely-driver", from: "${{ needs.build-and-test.outputs.version }}")
        ]
        ```
        
        ## 🚀 Quick Start
        
        ### CLI
        ```bash
        cluely-detector check
        cluely-detector monitor --interval 30
        ```
        
        ### Node.js
        ```javascript
        const { ClueLyDetector } = require('@no-cluely/detector');
        if (ClueLyDetector.isClueLyRunning()) {
            console.log('⚠️ Employee monitoring detected!');
        }
        ```
        
        ### Python
        ```python
        from no_cluely_detector import ClueLyDetector
        if ClueLyDetector.is_cluely_running():
            print('⚠️ Employee monitoring detected!')
        ```
        
        ## 🔧 What's New
        
        - ✅ Comprehensive multi-language support
        - ✅ Advanced evasion technique detection
        - ✅ Real-time monitoring capabilities
        - ✅ Modern packaging and distribution
        - ✅ Detailed reporting and analysis
        
        ## 📚 Documentation
        
        See individual README files in each language binding directory for detailed usage instructions.
        
        ## 🛡️ Privacy & Security
        
        This tool is designed to detect employee monitoring software transparently. All detection happens locally on your device - no data is transmitted anywhere.
        EOF
        
    - name: 🏷️ Create/Update Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-test.outputs.version }}
        name: "No-Cluely Driver v${{ needs.build-and-test.outputs.version }}"
        body_path: release_notes.md
        files: |
          packages/no-cluely-driver-*-macos.tar.gz
          packages/cluely-detector
          packages/*.tgz
          packages/*.whl
          packages/*.tar.gz
          packages/*.jar
          packages/libno_cluely_driver.dylib
          packages/no_cluely_driver.h
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== SUMMARY =====
  publish-summary:
    name: 📊 Publish Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-nodejs, publish-python, publish-java, publish-rust, publish-github-release]
    if: always()
    
    steps:
    - name: 📊 Create Summary
      run: |
        echo "## 🎯 Release Summary for v${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔨 Build & Test | ${{ needs.build-and-test.result == 'success' && '✅ Success' || '❌ Failed' }} | Core build and testing |" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 Node.js/npm | ${{ needs.publish-nodejs.result == 'success' && '✅ Published' || needs.publish-nodejs.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | @no-cluely/detector |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐍 Python/PyPI | ${{ needs.publish-python.result == 'success' && '✅ Published' || needs.publish-python.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | no-cluely-detector |" >> $GITHUB_STEP_SUMMARY
        echo "| ☕ Java/Maven | ${{ needs.publish-java.result == 'success' && '✅ Published' || needs.publish-java.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | com.nocluely:cluely-detector |" >> $GITHUB_STEP_SUMMARY
        echo "| 🦀 Rust/crates.io | ${{ needs.publish-rust.result == 'success' && '✅ Published' || needs.publish-rust.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | no-cluely-driver + cluely-detector |" >> $GITHUB_STEP_SUMMARY
        echo "| 📋 GitHub Release | ${{ needs.publish-github-release.result == 'success' && '✅ Created' || '❌ Failed' }} | Binaries and distribution |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Packages:" >> $GITHUB_STEP_SUMMARY
        echo "- **npm**: \`npm install @no-cluely/detector\`" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI**: \`pip install no-cluely-detector\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Maven**: \`com.nocluely:cluely-detector:${{ needs.build-and-test.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Cargo**: \`cargo install cluely-detector\`" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub**: Download binaries from releases" >> $GITHUB_STEP_SUMMARY 